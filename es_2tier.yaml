AWSTemplateFormatVersion: 2010-09-09
Description: ES 2 Tier CF Deployment Template
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    WebSubnet01:
      CIDR: 10.0.0.0/24
    WebSubnet02:
      CIDR: 10.0.1.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  WebSubnet01:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - WebSubnet01
        - CIDR
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  WebSubnet02:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - WebSubnet02
        - CIDR
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateSubnetRouteTableAssociation01:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref WebSubnet01
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation02:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref WebSubnet02
      RouteTableId: !Ref PrivateRouteTable
  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: PrivateNetworkAcl
  InboundHTTPPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundDynamicPortPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  InboundSSHPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0 #!Ref SSH Bastion Host
      PortRange:
        From: '22'
        To: '22'
  OutboundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PrivateSubnetNetworkAclAssociation01:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref WebSubnet01
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnetNetworkAclAssociation02:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref WebSubnet02
      NetworkAclId: !Ref PrivateNetworkAcl
  PublicApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref WebSubnet01
        - !Ref WebSubnet02
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
#   ALBListener:
#     Type: 'AWS::ElasticLoadBalancingV2::Listener'
#     Properties:
#       DefaultActions:
#         - Type: forward
#           TargetGroupArn: !Ref ALBTargetGroup
#       LoadBalancerArn: !Ref PublicApplicationLoadBalancer
#       Port: '80'
#       Protocol: HTTP
#   ALBTargetGroup:
#     Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
#     Properties:
#       HealthCheckIntervalSeconds: 90
#       HealthCheckTimeoutSeconds: 60
#       HealthyThresholdCount: 3
#       Port: 80
#       Protocol: HTTP
#       UnhealthyThresholdCount: 5
#       VpcId: !Ref VPC
  PublicLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Public ELB Security Group with HTTP access on port 80 from the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
#   WebServerFleet:
#     Type: 'AWS::AutoScaling::AutoScalingGroup'
#     DependsOn: PublicRoute
#     Properties:
#       VPCZoneIdentifier:
#         - !Ref PublicSubnet1
#         - !Ref PublicSubnet2
#       LaunchConfigurationName: !Ref WebServerLaunchConfig
#       MinSize: '1'
#       MaxSize: '10'
#       DesiredCapacity: !Ref WebServerCount
#       TargetGroupARNs:
#         - !Ref ALBTargetGroup
#       Tags:
#         - Key: Network
#           Value: Public
#           PropagateAtLaunch: 'true'
#     CreationPolicy:
#       ResourceSignal:
#         Timeout: PT45M
#         Count: !Ref WebServerCount
#     UpdatePolicy:
#       AutoScalingRollingUpdate:
#         MinInstancesInService: '1'
#         MaxBatchSize: '1'
#         PauseTime: PT15M
#         WaitOnResourceSignals: 'true'
#   WebServerLaunchConfig:
#     Type: 'AWS::AutoScaling::LaunchConfiguration'
#     Metadata:
#       'AWS::CloudFormation::Init':
#         config:
#           packages:
#             yum:
#               httpd: []
#           files:
#             /var/www/html/index.html:
#               content: !Join 
#                 - |+

#                 - - <img src="
#                   - !FindInMap 
#                     - Region2Examples
#                     - !Ref 'AWS::Region'
#                     - Examples
#                   - /cloudformation_graphic.png" alt="AWS CloudFormation Logo"/>
#                   - >-
#                     <h1>Congratulations, you have successfully launched the AWS
#                     CloudFormation sample.</h1>
#               mode: '000644'
#               owner: root
#               group: root
#             /etc/cfn/cfn-hup.conf:
#               content: !Join 
#                 - ''
#                 - - |
#                     [main]
#                   - stack=
#                   - !Ref 'AWS::StackId'
#                   - |+

#                   - region=
#                   - !Ref 'AWS::Region'
#                   - |+

#               mode: '000400'
#               owner: root
#               group: root
#             /etc/cfn/hooks.d/cfn-auto-reloader.conf:
#               content: !Join 
#                 - ''
#                 - - |
#                     [cfn-auto-reloader-hook]
#                   - |
#                     triggers=post.update
#                   - >
#                     path=Resources.WebServerLaunchConfig.Metadata.AWS::CloudFormation::Init
#                   - 'action=/opt/aws/bin/cfn-init -v '
#                   - '         --stack '
#                   - !Ref 'AWS::StackName'
#                   - '         --resource WebServerLaunchConfig '
#                   - '         --region '
#                   - !Ref 'AWS::Region'
#                   - |+

#                   - |
#                     runas=root
#               mode: '000400'
#               owner: root
#               group: root
#           services:
#             sysvinit:
#               httpd:
#                 enabled: 'true'
#                 ensureRunning: 'true'
#                 files:
#                   - /etc/httpd/conf.d/aptobackend.conf
#                   - /var/www/html/index.html
#               cfn-hup:
#                 enabled: 'true'
#                 ensureRunning: 'true'
#                 files:
#                   - /etc/cfn/cfn-hup.conf
#                   - /etc/cfn/hooks.d/cfn-auto-reloader.conf
#     Properties:
#       ImageId: !FindInMap 
#         - AWSRegionArch2AMI
#         - !Ref 'AWS::Region'
#         - !FindInMap 
#           - AWSInstanceType2Arch
#           - !Ref WebServerInstanceType
#           - Arch
#       SecurityGroups:
#         - !Ref WebServerSecurityGroup
#       InstanceType: !Ref WebServerInstanceType
#       KeyName: !Ref KeyName
#       AssociatePublicIpAddress: 'true'
#       UserData: !Base64 
#         'Fn::Join':
#           - ''
#           - - |
#               #!/bin/bash -xe
#             - |
#               yum update -y aws-cfn-bootstrap
#             - |
#               # Install the sample application
#             - '/opt/aws/bin/cfn-init -v '
#             - '    --stack '
#             - !Ref 'AWS::StackId'
#             - '    --resource WebServerLaunchConfig '
#             - '    --region '
#             - !Ref 'AWS::Region'
#             - |+

#             - |
#               # Signal copletion
#             - '/opt/aws/bin/cfn-signal -e $? '
#             - '    --stack '
#             - !Ref 'AWS::StackId'
#             - '    --resource WebServerFleet '
#             - '    --region '
#             - !Ref 'AWS::Region'
#             - |+

#   WebServerSecurityGroup:
#     Type: 'AWS::EC2::SecurityGroup'
#     Properties:
#       GroupDescription: >-
#         Allow access from load balancer and bastion as well as outbound HTTP and
#         HTTPS traffic
#       VpcId: !Ref VPC
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: '80'
#           ToPort: '80'
#           SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup
#         - IpProtocol: tcp
#           FromPort: '22'
#           ToPort: '22'
#           CidrIp: !Ref SSHLocation
# Outputs:
#   WebSite:
#     Description: URL of the website
#     Value: !Join 
#       - ''
#       - - 'http://'
#         - !GetAtt 
#           - PublicApplicationLoadBalancer
#           - DNSName
